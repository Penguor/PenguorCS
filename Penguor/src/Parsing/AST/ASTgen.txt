;; "Penguor\src\Parsing\AST"
; Expression Expr "Penguor\src\Parsing\AST\Expressions"
Assign CallExpr lhs TokenType op Expr value
Binary Expr lhs TokenType op Expr rhs
Unary TokenType? op Expr rhs
Call List<Call> callee
Increment CallExpr child TokenType postfix
TypeCall State name List<uint> dimensions
Boolean bool value
Null
Grouping Expr content
Var TypeCallExpr type AddressFrame name
Num int numBase string value double? numValue
String string value
Char string value
; Statement Stmt "Penguor\src\Parsing\AST\Statements"
Compiler TokenType dir Token[] val
Block List<Stmt> content
Var TypeCallExpr type AddressFrame name Expr? init
If Expr condition Stmt ifC List<ElifStmt> elif Stmt? elseC
Elif Expr condition Stmt content
While Expr condition Stmt content
Do Stmt content Expr condition
For VarExpr currentVar CallExpr vars Stmt content
Switch Expr condition List<Stmt> cases Stmt? defaultCase
Case Expr? condition List<Stmt> content
Asm string[] contents
Return Expr? value
Expr Expr expr
; Declaration Decl "Penguor\src\Parsing\AST\Declarations"
Program List<Decl> declarations
Using TypeCallExpr lib
Modified TokenType? accessMod TokenType? nonAccessMod Decl declaration
System AddressFrame name CallExpr? parent BlockDecl content
Data AddressFrame name CallExpr? parent BlockDecl content
Type AddressFrame name CallExpr? parent BlockDecl content
Function TypeCallExpr returns AddressFrame name List<VarExpr> parameters Decl content
Library State name BlockDecl content
Var TypeCallExpr type AddressFrame name Expr? init
StmtBlock List<Decl> content
Block List<Decl> content
Stmt Stmt stmt
; Call Call "Penguor\src\Parsing\AST\Calls"
Idf AddressFrame name
Function AddressFrame name List<Expr> args
Array AddressFrame name List<List<Expr>> indices