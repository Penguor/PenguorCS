; Expr "some path here"
AssignExpr Expr lhs Expr value
BinaryExpr Expr lhs TokenType op Expr rhs
UnaryExpr TokenType op Expr rhs
CallExpr List<Expr> callee List<Expr> args TokenType? postfix
BooleanExpr bool value
NullExpr
GroupingExpr
VarExpr Token accessMod Token[] nonAccessMod Expr type Token name Expr init
IdentifierExpr object value
NumExpr double value
StringExpr string value
EOFExpr
; Stmt "some path here :)"
ProgramStmt List<Stmt> declarations
UsingStmt Expr lib
SystemStmt Token accessMod Token[] nonAccessMod Token name Token parent Stmt content
ContainerStmt Token accessMod Token[] nonAccessMod Token name Token parent Stmt content
DatatypeStmt Token accessMod Token[] nonAccessMod Token name Token parent Stmt content
FunctionStmt Token accessMod Token[] nonAccessMod Token returns Token name List<Stmt> parameters
LibraryStmt Token name Stmt content
PPStmt Token dir object[] val
BlockStmt List<Stmt> content
IfStmt Expr condition List<Stmt> elif List<Stmt> elseC
ElifStmt Expr condition List<Stmt> content
CaseStmt Expr condition List<Stmt> statements
WhileStmt Expr condition List<Stmt> statements
DoStmt List<Stmt> statements Expr condition
ForStmt Stmt currentVar Expr vars List<Stmt> statements
SwitchStmt Expr condition List<Stmt> cases List<Stmt> defaultCase
CaseStmt Expr condition List<Stmt> statements
ExprStmt Expr expr
