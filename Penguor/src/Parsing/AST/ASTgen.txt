; Expr "Penguor\src\Parsing\AST\Expressions"
AssignExpr Expr lhs TokenType op Expr value
BinaryExpr Expr lhs TokenType op Expr rhs
UnaryExpr TokenType? op Expr rhs
CallExpr List<Call> callee TokenType? postfix
BooleanExpr bool value
NullExpr
GroupingExpr Expr content
VarExpr CallExpr type Token name
NumExpr double value
StringExpr string value
EOFExpr
; Stmt "Penguor\src\Parsing\AST\Statements"
CompilerStmt TokenType dir Token[] val
BlockStmt List<Stmt> content
VarStmt Expr variable Expr? init
IfStmt Expr condition Stmt ifC List<Stmt> elif Stmt? elseC
ElifStmt Expr condition Stmt content
WhileStmt Expr condition Stmt content
DoStmt Stmt content Expr condition
ForStmt Expr currentVar Expr vars Stmt content
SwitchStmt Expr condition List<Stmt> cases Stmt? defaultCase
CaseStmt Expr? condition List<Stmt> content
ReturnStmt Expr? value
ExprStmt Expr expr
; Decl "Penguor\src\Parsing\AST\Declarations"
ProgramDecl List<Decl> declarations
UsingDecl CallExpr lib
SystemDecl TokenType? accessMod TokenType[] nonAccessMod Token name CallExpr? parent BlockDecl content
DataDecl TokenType? accessMod TokenType[] nonAccessMod Token name CallExpr? parent BlockDecl content
TypeDecl TokenType? accessMod TokenType[] nonAccessMod Token name CallExpr? parent BlockDecl content
FunctionDecl TokenType? accessMod TokenType[] nonAccessMod VarExpr variable List<VarExpr> parameters Decl content
LibraryDecl TokenType? accessMod TokenType[] nonAccessMod List<Token> name BlockDecl content
VarDecl TokenType? accessMod TokenType[] nonAccessMod VarExpr variable Expr? init
BlockDecl List<Decl> content
DeclStmt Stmt stmt
; Call "Penguor\src\Parsing\AST\Calls"
FunctionCall Token name List<Expr> args
IdfCall Token name