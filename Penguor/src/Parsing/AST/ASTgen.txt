; Expr "D:\Carl\source\repos\Penguor\PenguorCS\Penguor\src\Parsing\AST\Expressions"
AssignExpr Expr lhs Expr value
BinaryExpr Expr lhs TokenType op Expr rhs
UnaryExpr TokenType op Expr rhs
CallExpr List<Expr> callee List<Expr> args TokenType? postfix
BooleanExpr bool value
NullExpr
GroupingExpr
VarExpr Expr type Token name
IdentifierExpr object value
NumExpr double value
StringExpr string value
EOFExpr
; Stmt "D:\Carl\source\repos\Penguor\PenguorCS\Penguor\src\Parsing\AST\Statements"
FunctionStmt Token accessMod Token[] nonAccessMod Token returns Token name List<Stmt> parameters
PPStmt Token dir object[] val
BlockStmt List<Stmt> content
IfStmt Expr condition List<Stmt> elif List<Stmt> elseC
ElifStmt Expr condition List<Stmt> content
CaseStmt Expr condition List<Stmt> statements
WhileStmt Expr condition List<Stmt> statements
DoStmt List<Stmt> statements Expr condition
ForStmt Stmt currentVar Expr vars List<Stmt> statements
SwitchStmt Expr condition List<Stmt> cases List<Stmt> defaultCase
CaseStmt Expr condition List<Stmt> statements
ExprStmt Expr expr
; Decl "D:\Carl\source\repos\Penguor\PenguorCS\Penguor\src\Parsing\AST\Declarations"
ProgramDecl List<Stmt> declarations
UsingDecl Expr lib
SystemDecl Token accessMod Token[] nonAccessMod Token name Token parent Stmt content
ContainerDecl Token accessMod Token[] nonAccessMod Token name Token parent Stmt content
DatatypeDecl Token accessMod Token[] nonAccessMod Token name Token parent Stmt content
LibraryDecl Token name Stmt content
VarDecl Token type Token name