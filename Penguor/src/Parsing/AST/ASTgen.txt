; Expression Expr "Penguor\src\Parsing\AST\Expressions"
Assign CallExpr lhs TokenType op Expr value
Binary Expr lhs TokenType op Expr rhs
Unary TokenType? op Expr rhs
Call List<Call> callee TokenType? postfix
Boolean bool value
Null
Grouping Expr content
Var CallExpr type AddressFrame name
Num int numBase string value double? numValue
String string value
; Statement Stmt "Penguor\src\Parsing\AST\Statements"
Compiler TokenType dir Token[] val
Block List<Stmt> content
Var CallExpr type AddressFrame name Expr? init
If Expr condition Stmt ifC List<Stmt> elif Stmt? elseC
Elif Expr condition Stmt content
While Expr condition Stmt content
Do Stmt content Expr condition
For VarExpr currentVar CallExpr vars Stmt content
Switch Expr condition List<Stmt> cases Stmt? defaultCase
Case Expr? condition List<Stmt> content
Asm string[] contents
Return Expr? value
Expr Expr expr
; Declaration Decl "Penguor\src\Parsing\AST\Declarations"
Program List<Decl> declarations
Using CallExpr lib
System TokenType? accessMod TokenType[] nonAccessMod AddressFrame name CallExpr? parent BlockDecl content
Data TokenType? accessMod TokenType[] nonAccessMod AddressFrame name CallExpr? parent BlockDecl content
Type TokenType? accessMod TokenType[] nonAccessMod AddressFrame name CallExpr? parent BlockDecl content
Function TokenType? accessMod TokenType[] nonAccessMod CallExpr returns AddressFrame name List<VarExpr> parameters Decl content
Library TokenType? accessMod TokenType[] nonAccessMod State name BlockDecl content
Var TokenType? accessMod TokenType[] nonAccessMod CallExpr type AddressFrame name Expr? init
Block List<Decl> content
Stmt Stmt stmt
; Call Call "Penguor\src\Parsing\AST\Calls"
Function AddressFrame name List<Expr> args
Idf AddressFrame name